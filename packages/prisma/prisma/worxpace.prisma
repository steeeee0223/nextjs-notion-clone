// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client/worxpace"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DB_WORXPACE")
}

model List {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  order     Int
  createdBy String
  updatedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boardId   String   @db.ObjectId
  cards     Card[]

  @@index([boardId])
}

model Card {
  id          String   @id @default(uuid()) @map("_id")
  title       String
  order       Int
  description String?  @db.String
  createdBy   String
  updatedBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  listId      String
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
  RESTORE
}

enum ENTITY_TYPE {
  LIST
  ITEM
  KANBAN
  WHITEBOARD
  DOCUMENT
  WORKFLOW
}

type Entity {
  entityId String
  type     ENTITY_TYPE
  title    String
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
  action    ACTION
  entity    Entity
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId], map: "accountId")
  @@index([entity.entityId])
}

enum ROLE {
  ADMIN
  USER
  ORG
}

model Limitation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      ROLE
  clientId  String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  role                   ROLE
  clientId               String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum ICON_TYPE {
  emoji
  lucide
  file
}

type Icon {
  type  ICON_TYPE
  src   String
  color String?
}

enum COVER_TYPE {
  file
  url
}

type CoverImage {
  type COVER_TYPE
  url  String
}

model Document {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  type        String
  title       String
  isArchived  Boolean
  parentId    String?     @db.ObjectId
  content     String?
  coverImage  CoverImage?
  icon        Icon?
  isPublished Boolean
  createdId   String
  createdBy   Account     @relation("createdBy", fields: [createdId], references: [id])
  updatedId   String
  updatedBy   Account     @relation("updatedBy", fields: [updatedId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  parent      Document?   @relation("DocumentParent", onUpdate: NoAction, onDelete: NoAction, fields: [parentId], references: [id])
  children    Document[]  @relation("DocumentParent")

  @@index([workspaceId], name: "workspaceId")
  @@index([workspaceId, parentId], name: "byWorkspaceParent")
  @@index([workspaceId, type], name: "byWorkspaceType")
}

enum WORKSPACE_ROLE {
  OWNER
  MEMBER
  GUEST
}

model Membership {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  role        WORKSPACE_ROLE
  joinedAt    DateTime       @default(now())
  accountId   String
  account     Account        @relation(fields: [accountId], references: [id])
  workspaceId String
  workspace   Workspace      @relation(fields: [workspaceId], references: [id])

  @@unique([accountId, workspaceId])
  @@index([accountId])
  @@index([workspaceId])
}

model Account {
  id                    String       @id @default(uuid()) @map("_id")
  name                  String
  clerkId               String       @unique(map: "clerkId")
  updatedAt             DateTime     @updatedAt
  memberships           Membership[]
  // Preferrance
  avatarUrl             String
  preferredName         String
  email                 String
  hasPassword           Boolean
  // Relations
  x_auditLog            AuditLog[]
  x_document_created_by Document[]   @relation("createdBy")
  x_document_updated_by Document[]   @relation("updatedBy")

  @@index([email])
}

enum PLAN {
  FREE
  EDUCATION
  PLUS
  BUSINESS
  ENTERPRISE
}

model Workspace {
  id          String       @id @default(uuid()) @map("_id")
  createdBy   String
  memberships Membership[]
  updatedAt   DateTime     @updatedAt
  // Settings
  name        String
  icon        Icon?
  domain      String
  // People
  inviteToken String       @unique(map: "inviteToken") @default(uuid())
  // Plan
  plan        PLAN         @default(FREE)
  // Relations
  x_document  Document[]

  @@index([createdBy])
}

model Invitation {
  id            String         @id @default(uuid()) @map("_id")
  clerkInviteId String
  email         String
  role          WORKSPACE_ROLE
  workspaceId   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([workspaceId, email], name: "byWorkspaceEmail")
}
